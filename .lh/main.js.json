{
    "sourceFile": "main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1699432272829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1699432417079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,24 +138,24 @@\n             data: []\r\n         });\r\n     });\r\n     ipcMain.on('delete-key', async (event, arg) => {\r\n-        db.all(\"SELECT * FROM savekey \", (err, row) => {\r\n+        const stmt = db.prepare('DELETE FROM savekey WHERE id = ?');\r\n+        stmt.run (arg, ()=>{\r\n             if (err) {\r\n-                event.reply('delete-savekey-respuesta', {\r\n+                event.reply('delete-key-save', {\r\n                     status: false,\r\n-                    mensaje: \"Error no se ha encontrado ninguna pregunta\",\r\n+                    mensaje: \"\",\r\n                     data: []\r\n                 });\r\n             } else {\r\n-       \r\n-                event.reply('delete-savekey-respuesta', {\r\n+                event.reply('delete-key-save', {\r\n                     status: true,\r\n                     mensaje: \"\",\r\n-                    data: row\r\n+                    data: []\r\n                 });\r\n             }\r\n-        });\r\n+        })\r\n     });\r\n     appWin.loadURL(`file://${__dirname}/dist/index.html`);\r\n \r\n     appWin.setMenu(null);\r\n"
                },
                {
                    "date": 1699432465459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,15 +141,15 @@\n     ipcMain.on('delete-key', async (event, arg) => {\r\n         const stmt = db.prepare('DELETE FROM savekey WHERE id = ?');\r\n         stmt.run (arg, ()=>{\r\n             if (err) {\r\n-                event.reply('delete-key-save', {\r\n+                event.reply('delete-key-respuesta', {\r\n                     status: false,\r\n                     mensaje: \"\",\r\n                     data: []\r\n                 });\r\n             } else {\r\n-                event.reply('delete-key-save', {\r\n+                event.reply('delete-key-respuesta', {\r\n                     status: true,\r\n                     mensaje: \"\",\r\n                     data: []\r\n                 });\r\n"
                },
                {
                    "date": 1699433551029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n                     mensaje: \"Error no se ha encontrado ninguna pregunta\",\r\n                     data: []\r\n                 });\r\n             } else {\r\n-       \r\n+                console.log(row);\r\n                 event.reply('savekey-respuesta', {\r\n                     status: true,\r\n                     mensaje: \"\",\r\n                     data: row\r\n"
                },
                {
                    "date": 1699433655667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,8 @@\n                     mensaje: \"Error no se ha encontrado ninguna pregunta\",\r\n                     data: []\r\n                 });\r\n             } else {\r\n-                console.log(row);\r\n                 event.reply('savekey-respuesta', {\r\n                     status: true,\r\n                     mensaje: \"\",\r\n                     data: row\r\n"
                },
                {
                    "date": 1699433711658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,9 @@\n             data: []\r\n         });\r\n     });\r\n     ipcMain.on('delete-key', async (event, arg) => {\r\n+        console.log(arg);\r\n         const stmt = db.prepare('DELETE FROM savekey WHERE id = ?');\r\n         stmt.run (arg, ()=>{\r\n             if (err) {\r\n                 event.reply('delete-key-respuesta', {\r\n"
                },
                {
                    "date": 1699433776974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n     });\r\n     ipcMain.on('delete-key', async (event, arg) => {\r\n         console.log(arg);\r\n         const stmt = db.prepare('DELETE FROM savekey WHERE id = ?');\r\n-        stmt.run (arg, ()=>{\r\n+        stmt.run (arg, (err)=>{\r\n             if (err) {\r\n                 event.reply('delete-key-respuesta', {\r\n                     status: false,\r\n                     mensaje: \"\",\r\n"
                },
                {
                    "date": 1699433908105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,8 @@\n             data: []\r\n         });\r\n     });\r\n     ipcMain.on('delete-key', async (event, arg) => {\r\n-        console.log(arg);\r\n         const stmt = db.prepare('DELETE FROM savekey WHERE id = ?');\r\n         stmt.run (arg, (err)=>{\r\n             if (err) {\r\n                 event.reply('delete-key-respuesta', {\r\n"
                },
                {
                    "date": 1699435265442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n             }\r\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n+        console.log(\"Entro\");\r\n         let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo,password,ubicacion,otros_datos) VALUES (?,?,?,?)\");\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         stmt.run(arg.usuario,password,arg.ubicacion,arg.datosExtra);\r\n         stmt.finalize();\r\n"
                },
                {
                    "date": 1699435310093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n         console.log(\"Entro\");\r\n-        let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo,password,ubicacion,otros_datos) VALUES (?,?,?,?)\");\r\n+        let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo,password,ubicacion,otros_datos) VALUES (?,?,?,?) LIMIT 1\");\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         stmt.run(arg.usuario,password,arg.ubicacion,arg.datosExtra);\r\n         stmt.finalize();\r\n         event.reply('registrar-key-save', {\r\n"
                },
                {
                    "date": 1699435414856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,18 +126,27 @@\n             }\r\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n-        console.log(\"Entro\");\r\n-        let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo,password,ubicacion,otros_datos) VALUES (?,?,?,?) LIMIT 1\");\r\n+        let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo, password, ubicacion, otros_datos) VALUES (?, ?, ?, ?)\");\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n-        stmt.run(arg.usuario,password,arg.ubicacion,arg.datosExtra);\r\n+        stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, function(err) {\r\n+            if (err) {\r\n+                console.error(err);\r\n+                event.reply('registrar-key-save', {\r\n+                    status: false,\r\n+                    mensaje: \"Error al insertar en la base de datos\",\r\n+                    data: []\r\n+                });\r\n+            } else {\r\n+                event.reply('registrar-key-save', {\r\n+                    status: true,\r\n+                    mensaje: \"\",\r\n+                    data: []\r\n+                });\r\n+            }\r\n+        });\r\n         stmt.finalize();\r\n-        event.reply('registrar-key-save', {\r\n-            status: true,\r\n-            mensaje: \"\",\r\n-            data: []\r\n-        });\r\n     });\r\n     ipcMain.on('delete-key', async (event, arg) => {\r\n         const stmt = db.prepare('DELETE FROM savekey WHERE id = ?');\r\n         stmt.run (arg, (err)=>{\r\n"
                },
                {
                    "date": 1699435562759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n         let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo, password, ubicacion, otros_datos) VALUES (?, ?, ?, ?)\");\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n-        stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, function(err) {\r\n+        stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n                 console.error(err);\r\n                 event.reply('registrar-key-save', {\r\n                     status: false,\r\n"
                },
                {
                    "date": 1699435656633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n             }\r\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n+        console.log(arg);\r\n         let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo, password, ubicacion, otros_datos) VALUES (?, ?, ?, ?)\");\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n"
                },
                {
                    "date": 1699435715151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n         console.log(arg);\r\n+        const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo, password, ubicacion, otros_datos) VALUES (?, ?, ?, ?)\");\r\n-        const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n                 console.error(err);\r\n                 event.reply('registrar-key-save', {\r\n"
                },
                {
                    "date": 1699435899932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,8 @@\n             }\r\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n-        console.log(arg);\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo, password, ubicacion, otros_datos) VALUES (?, ?, ?, ?)\");\r\n         stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n"
                },
                {
                    "date": 1699436088617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,8 @@\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo, password, ubicacion, otros_datos) VALUES (?, ?, ?, ?)\");\r\n         stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n-                console.error(err);\r\n                 event.reply('registrar-key-save', {\r\n                     status: false,\r\n                     mensaje: \"Error al insertar en la base de datos\",\r\n                     data: []\r\n"
                },
                {
                    "date": 1699436135327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,9 @@\n                     mensaje: \"Error al insertar en la base de datos\",\r\n                     data: []\r\n                 });\r\n             } else {\r\n+                console.log(\"entro\");\r\n                 event.reply('registrar-key-save', {\r\n                     status: true,\r\n                     mensaje: \"\",\r\n                     data: []\r\n"
                },
                {
                    "date": 1699436406262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n-        let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo, password, ubicacion, otros_datos) VALUES (?, ?, ?, ?)\");\r\n+        let stmt = db.prepare(\"INSERT INTO savekey  VALUES (?, ?, ?, ?)\");\r\n         stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n                 event.reply('registrar-key-save', {\r\n                     status: false,\r\n"
                },
                {
                    "date": 1699436446616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n-        let stmt = db.prepare(\"INSERT INTO savekey  VALUES (?, ?, ?, ?)\");\r\n-        stmt.run(arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n+        let stmt = db.prepare(\"INSERT INTO savekey  VALUES (?,?, ?, ?, ?)\");\r\n+        stmt.run(null,arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n                 event.reply('registrar-key-save', {\r\n                     status: false,\r\n                     mensaje: \"Error al insertar en la base de datos\",\r\n"
                },
                {
                    "date": 1699436738250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,11 @@\n             }\r\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n-        const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n+        // const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         let stmt = db.prepare(\"INSERT INTO savekey  VALUES (?,?, ?, ?, ?)\");\r\n-        stmt.run(null,arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n+        stmt.run(null,arg.usuario, arg.password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n                 event.reply('registrar-key-save', {\r\n                     status: false,\r\n                     mensaje: \"Error al insertar en la base de datos\",\r\n"
                },
                {
                    "date": 1699436768800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,11 @@\n             }\r\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n-        // const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n+        const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         let stmt = db.prepare(\"INSERT INTO savekey  VALUES (?,?, ?, ?, ?)\");\r\n-        stmt.run(null,arg.usuario, arg.password, arg.ubicacion, arg.datosExtra, (err) => {\r\n+        stmt.run(null,arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n             if (err) {\r\n                 event.reply('registrar-key-save', {\r\n                     status: false,\r\n                     mensaje: \"Error al insertar en la base de datos\",\r\n"
                },
                {
                    "date": 1699436831705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,17 +128,17 @@\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n         let stmt = db.prepare(\"INSERT INTO savekey  VALUES (?,?, ?, ?, ?)\");\r\n-        stmt.run(null,arg.usuario, password, arg.ubicacion, arg.datosExtra, (err) => {\r\n+        stmt.run(null,arg.usuario, password, arg.ubicacion, arg.datosExtra, (err,row) => {\r\n             if (err) {\r\n                 event.reply('registrar-key-save', {\r\n                     status: false,\r\n                     mensaje: \"Error al insertar en la base de datos\",\r\n                     data: []\r\n                 });\r\n             } else {\r\n-                console.log(\"entro\");\r\n+                console.log(row);\r\n                 event.reply('registrar-key-save', {\r\n                     status: true,\r\n                     mensaje: \"\",\r\n                     data: []\r\n"
                },
                {
                    "date": 1699436976191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,10 +143,11 @@\n                     mensaje: \"\",\r\n                     data: []\r\n                 });\r\n             }\r\n+            stmt.finalize();\r\n         });\r\n-        stmt.finalize();\r\n+    \r\n     });\r\n     ipcMain.on('delete-key', async (event, arg) => {\r\n         const stmt = db.prepare('DELETE FROM savekey WHERE id = ?');\r\n         stmt.run (arg, (err)=>{\r\n"
                },
                {
                    "date": 1699437033724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n         });\r\n     });\r\n     ipcMain.on('registrar-key',(event,arg)=>{\r\n         const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n-        let stmt = db.prepare(\"INSERT INTO savekey  VALUES (?,?, ?, ?, ?)\");\r\n-        stmt.run(null,arg.usuario, password, arg.ubicacion, arg.datosExtra, (err,row) => {\r\n+        let stmt = db.prepare(\"INSERT INTO savekey VALUES (?, ?, ?, ?, ?)\");\r\n+        stmt.run(null, arg.usuario, password, arg.ubicacion, arg.datosExtra, (err, row) => {\r\n             if (err) {\r\n                 event.reply('registrar-key-save', {\r\n                     status: false,\r\n                     mensaje: \"Error al insertar en la base de datos\",\r\n@@ -143,9 +143,9 @@\n                     mensaje: \"\",\r\n                     data: []\r\n                 });\r\n             }\r\n-            stmt.finalize();\r\n+            stmt.finalize(); // Mover stmt.finalize() aquí\r\n         });\r\n     \r\n     });\r\n     ipcMain.on('delete-key', async (event, arg) => {\r\n"
                },
                {
                    "date": 1699437156551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,30 +125,9 @@\n                 });\r\n             }\r\n         });\r\n     });\r\n-    ipcMain.on('registrar-key',(event,arg)=>{\r\n-        const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n-        let stmt = db.prepare(\"INSERT INTO savekey VALUES (?, ?, ?, ?, ?)\");\r\n-        stmt.run(null, arg.usuario, password, arg.ubicacion, arg.datosExtra, (err, row) => {\r\n-            if (err) {\r\n-                event.reply('registrar-key-save', {\r\n-                    status: false,\r\n-                    mensaje: \"Error al insertar en la base de datos\",\r\n-                    data: []\r\n-                });\r\n-            } else {\r\n-                console.log(row);\r\n-                event.reply('registrar-key-save', {\r\n-                    status: true,\r\n-                    mensaje: \"\",\r\n-                    data: []\r\n-                });\r\n-            }\r\n-            stmt.finalize(); // Mover stmt.finalize() aquí\r\n-        });\r\n-    \r\n-    });\r\n+\r\n     ipcMain.on('delete-key', async (event, arg) => {\r\n         const stmt = db.prepare('DELETE FROM savekey WHERE id = ?');\r\n         stmt.run (arg, (err)=>{\r\n             if (err) {\r\n"
                }
            ],
            "date": 1699432272829,
            "name": "Commit-0",
            "content": "const { app, BrowserWindow } = require(\"electron\");\r\nconst { ipcMain } = require('electron');\r\nconst bcrypt = require('bcrypt');\r\nconst crypto = require('crypto-js');\r\n\r\nconst clave = '8kZ$wE4Y#P1sXmN'; \r\n\r\nlet sqlite3 = require('@journeyapps/sqlcipher').verbose();\r\nlet db = new sqlite3.Database('./@D8p#vWzQy%T!kRn/$DbX&vR2Y!T9aPq.db');\r\ndb.run(\"PRAGMA key = 'Jd$9Lp@5fX#sK!pR'\");\r\nlet appWin;\r\n\r\ncreateWindow = () => {\r\n    appWin = new BrowserWindow({\r\n        width: 1000,\r\n        height: 700,\r\n        title: \"Angular and Electron\",\r\n        resizable: false,\r\n        webPreferences: {\r\n            contextIsolation: false,\r\n            nodeIntegration: true\r\n        }\r\n    });\r\n    ipcMain.on('ls-questions', (event, arg) => {\r\n        db.all(\"SELECT * FROM questions\", (err, row) => {\r\n            if (err) {\r\n                event.reply('ls-questions-respuesta', {\r\n                    status: false,\r\n                    mensaje: \"Error no se ha encontrado ninguna pregunta\",\r\n                    data: []\r\n                });\r\n            } else {\r\n                event.reply('ls-questions-respuesta', {\r\n                    status: true,\r\n                    mensaje: \"\",\r\n                    data: row\r\n                });\r\n            }\r\n        });\r\n    });\r\n    ipcMain.on('registrar-login', async (event, arg) => {\r\n        let stmt = db.prepare(\"INSERT INTO login (password) VALUES (?)\");\r\n        const saltRounds = 10;\r\n        const hashedPassword = await bcrypt.hash(arg.password, saltRounds);\r\n        stmt.run(hashedPassword);\r\n        stmt.finalize();\r\n        event.reply('registrar-login-respuesta',{\r\n            status:true,\r\n            mensaje:\"Se ha registrado la contraseña\",\r\n            data: []\r\n        })\r\n    });\r\n    ipcMain.on('registrar-respuesta', async (event, arg) => {\r\n        for (let i = 0; i < arg.length; i++) {\r\n            let stmt = db.prepare(\"INSERT INTO login_questions (id_question,respuesta) VALUES (?,?)\");\r\n            stmt.run(arg[i].idQuestion,arg[i].respuesta);\r\n            stmt.finalize();\r\n        \r\n        }\r\n        event.reply('registrar-respuesta-respuesta',{\r\n            status:true,\r\n            mensaje:\"Se ha registrado las preguntas\",\r\n            data: []\r\n        })\r\n    });\r\n    ipcMain.on ('entrar',async(event, args )=>{\r\n        db.all(\"SELECT * FROM login LIMIT 1\", async (err, row) => {\r\n            if (err) {\r\n                event.reply('entrar-respuesta', {\r\n                    status: false,\r\n                    mensaje: \"Error no se ha encontrado ninguna pregunta\",\r\n                    data: []\r\n                });\r\n            } else {\r\n                const respuesta = await bcrypt.compare(args, row[0].password)\r\n                event.reply('entrar-respuesta', {\r\n                    status: respuesta,\r\n                    mensaje: \"\",\r\n                    data: []\r\n                });\r\n            }\r\n        });\r\n    })\r\n    ipcMain.on('ls-login', async (event, arg) => {\r\n        db.all(\"SELECT * FROM login LIMIT 1\", (err, row) => {\r\n            if (err) {\r\n                event.reply('ls-login-respuesta', {\r\n                    status: false,\r\n                    mensaje: \"Error no se ha encontrado ninguna pregunta\",\r\n                    data: []\r\n                });\r\n            } else {\r\n                event.reply('ls-login-respuesta', {\r\n                    status: true,\r\n                    mensaje: \"\",\r\n                    data: row[0]\r\n                });\r\n            }\r\n        });\r\n    });\r\n    ipcMain.on('registrar-key',(event,arg)=>{\r\n        let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo,password,ubicacion,otros_datos) VALUES (?,?,?,?)\");\r\n        const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n        stmt.run(arg.usuario,password,arg.ubicacion,arg.datosExtra);\r\n        stmt.finalize();\r\n        event.reply('registrar-key-save', {\r\n            status: true,\r\n            mensaje: \"\",\r\n            data: []\r\n        });\r\n    });\r\n    ipcMain.on('ls-key', async (event, arg) => {\r\n        db.all(\"SELECT * FROM savekey \", (err, row) => {\r\n            if (err) {\r\n                event.reply('savekey-respuesta', {\r\n                    status: false,\r\n                    mensaje: \"Error no se ha encontrado ninguna pregunta\",\r\n                    data: []\r\n                });\r\n            } else {\r\n       \r\n                event.reply('savekey-respuesta', {\r\n                    status: true,\r\n                    mensaje: \"\",\r\n                    data: row\r\n                });\r\n            }\r\n        });\r\n    });\r\n    ipcMain.on('registrar-key',(event,arg)=>{\r\n        let stmt = db.prepare(\"INSERT INTO savekey (usuario_correo,password,ubicacion,otros_datos) VALUES (?,?,?,?)\");\r\n        const password = crypto.AES.encrypt(arg.password, clave).toString();\r\n        stmt.run(arg.usuario,password,arg.ubicacion,arg.datosExtra);\r\n        stmt.finalize();\r\n        event.reply('registrar-key-save', {\r\n            status: true,\r\n            mensaje: \"\",\r\n            data: []\r\n        });\r\n    });\r\n    ipcMain.on('delete-key', async (event, arg) => {\r\n        db.all(\"SELECT * FROM savekey \", (err, row) => {\r\n            if (err) {\r\n                event.reply('delete-savekey-respuesta', {\r\n                    status: false,\r\n                    mensaje: \"Error no se ha encontrado ninguna pregunta\",\r\n                    data: []\r\n                });\r\n            } else {\r\n       \r\n                event.reply('delete-savekey-respuesta', {\r\n                    status: true,\r\n                    mensaje: \"\",\r\n                    data: row\r\n                });\r\n            }\r\n        });\r\n    });\r\n    appWin.loadURL(`file://${__dirname}/dist/index.html`);\r\n\r\n    appWin.setMenu(null);\r\n\r\n    appWin.webContents.openDevTools();\r\n\r\n\r\n    appWin.on(\"closed\", () => {\r\n        appWin = null;\r\n    });\r\n}\r\n\r\napp.on(\"ready\", createWindow);\r\n\r\napp.on(\"window-all-closed\", () => {\r\n    if (process.platform !== \"darwin\") {\r\n        app.quit();\r\n    }\r\n});"
        }
    ]
}